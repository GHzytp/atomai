"""
ase_obj_coords.py
=========

Module for working with atom/defect/particle coordinates and converting to ASE object

Created by Ayana Ghosh (email: research.aghosh@gmail.com)
"""

from typing import Tuple, Optional, Union, List, Dict
import warnings

import numpy as np
import matplotlib.pyplot as plt
import os, re
import sys
from scipy import spatial, ndimage, optimize
from sklearn import cluster
import torch
from .viz import plot_lattice_bonds

def ase_obj_single_atom_basic(coords_dict, frame_number, material_system, atom_name, filepath, filename_wr, ang2pix=10.5):
  """
    Create Atomic Simulation Environment (ASE) object from coordinates dictionary object generated by AtomAI using a cubic cell

    Args:
        coords_dict: dictionary object of coordinates produecd by AtomAI
        frame_number: image frame number
        material_system: name of material (string)
        filepath: location to save the ASE object (string)
        filename_wr: name of ASE object (string)
            
    """
  pick_one_aoi = np.array(coords_dict[frame_number]) #convert to numpy array
  pick_one_aoi = pick_one_aoi/ang2pix #pixel to angstrom conversion

  a_lattice = np.max(pick_one_aoi)+0.5
  b_lattice = a_lattice
  c_lattice = a_lattice

  c_coords_aoi = (np.max(pick_one_aoi))/2
  pick_one_aoi[:,2] = c_coords_aoi
  length_coords = pick_one_aoi.shape[0]

  #open a text file and write to it following the format of .vasp file
  file1 = open(str(filepath)+str(filename_wr),"w") #mention the path here where you want to save your files
  file1.write(str(material_system)+ "\n")
  file1.write(" 1.0000 \n")
  file1.write("  "+str(a_lattice)+ " 0.0000 0.0000 \n")
  file1.write("  0.0000 "+str(b_lattice)+" 0.0000 \n")
  file1.write("  0.0000 0.0000 "+str(c_lattice)+ "\n")
  file1.write(" "+atom_name+ "\n")
  file1.write(" "+str(length_coords)+ "\n")
  file1.write("Cartesian \n")

  for i in range(length_coords):
    file1.write(str(pick_one_aoi[i][0]) + "\t"+str(pick_one_aoi[i][1]) + "\t"+str(pick_one_aoi[i][2])+ "\n")
  file1.close()
  print("You have successfully created an ASE object. \n")
  print("This is a cubic cell of "+material_system+ ". \n") 
  print("Now you can read it in using ase.io.vasp.read_vasp and perform MD simulations! \n")
  return file1


def ase_obj_adv(a_lattice, b_lattice, c_lattice, coords_dict, frame_number, material_system, atom_names, atoms_num ,filepath, filename_wr, ang2pix=10.5):

"""
    Create Atomic Simulation Environment (ASE) object from coordinates dictionary object generated by AtomAI using customized cell, multiple atoms as by user's choice

    Args:
        a_lattice: list of lattice vector in a direction ([a1,a2,a3])
        b_lattice: list of lattice vector in a direction ([b1,b2,c3])
        c_lattice: list of lattice vector in a direction ([c1,c2,c3])
        coords_dict: dictionary object of coordinates produecd by AtomAI
        frame_number: image frame number
        material_system: name of material (string)
        atom_names: list of all atoms present in the system (string)
        atoms_num: list of number of each kind of atom present
        filepath: location to save the ASE object (string)
        filename_wr: name of ASE object (string)
            
    """
  pick_one_aoi = np.array(coords_dict[frame_number]) #convert to numpy array
  pick_one_aoi = pick_one_aoi/ang2pix #pixel to angstrom conversion

  c_coords_aoi = (np.max(pick_one_aoi))/2
  pick_one_aoi[:,2] = c_coords_aoi
  length_coords = pick_one_aoi.shape[0]

  atoms_all = len(atom_names)

  #open a text file and write to it following the format of .vasp file
  file1 = open(str(filepath)+str(filename_wr),"w") #mention the path here where you want to save your files
  file1.write(str(material_system)+ "\n")
  file1.write(" 1.0000 \n")
  file1.write("  "+str(a_lattice[0])+ " " +str(a_lattice[1])+ " "+str(a_lattice[2])+ "\n")
  file1.write("  "+str(b_lattice[0])+ " " +str(b_lattice[1])+ " "+str(b_lattice[2])+ "\n")
  file1.write("  "+str(c_lattice[0])+ " " +str(c_lattice[1])+ " "+str(c_lattice[2])+ "\n")

  for j in range(len(atom_names)):
    file1.write(" "+atom_names[j]+ " ")
  file1.write("\n")
  for k in range(len(atoms_num)):
    file1.write(" "+str(atoms_num[k])+ " ")
  file1.write("\n")
  file1.write("Cartesian \n")

  for i in range(length_coords):
    file1.write(str(pick_one_aoi[i][0]) + "\t"+str(pick_one_aoi[i][1]) + "\t"+str(pick_one_aoi[i][2])+ "\n")
  file1.close()
  print("You have successfully created an ASE object. \n")
  print("You have prepared "+material_system+ ". \n") 
  print("Now you can read it in using ase.io.vasp.read_vasp and perform MD simulations! \n")
  return file1


