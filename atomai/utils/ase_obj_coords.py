
"""
ase_obj_coords.py.

=========

Module for working with atom/defect/particle coordinates and converting
to ASE object

Created by Ayana Ghosh (email: research.aghosh@gmail.com)
"""

import numpy as np
from typing import Dict, List


def ase_obj_single_atom_basic(coords_dict: Dict[int, np.ndarray],
                              frame_number: int,
                              material_system: str, atom_name: str,
                              filepath: str, filename_wr: str,
                              ang2pix=10.5) -> None:
    """
    Create Atomic Simulation Environment (ASE) object.
    This object is a text file that can be readable by ase.io.vasp.read_vasp.
    This function reads in coordinates dictionary object generated by AtomAI.
    And uses a cubic cell to construct the object.

    Args:
        coords_dict: dictionary object of coordinates produecd by AtomAI
        frame_number: image frame number
        material_system: name of material (string)
        filepath: location to save the ASE object (string)
        filename_wr: name of ASE object (string)
    """
    pick_one_aoi = np.array(coords_dict[frame_number])  # np array
    pick_one_aoi = pick_one_aoi / ang2pix  # pixel to angstrom conversion

    a_lattice = np.max(pick_one_aoi) + 0.5
    b_lattice = a_lattice
    c_lattice = a_lattice

    c_coords_aoi = (np.max(pick_one_aoi)) / 2
    pick_one_aoi[:, 2] = c_coords_aoi
    length_coords = pick_one_aoi.shape[0]

    # open a text file and write to it following the format of .vasp file
    file1 = open(str(filepath) + str(filename_wr), "w")
    file1.write(str(material_system) + "\n")
    file1.write(" 1.0000 \n")
    file1.write("  " + str(a_lattice) + " 0.0000 0.0000 \n")
    file1.write("  0.0000 " + str(b_lattice) + " 0.0000 \n")
    file1.write("  0.0000 0.0000 " + str(c_lattice) + "\n")
    file1.write(" " + atom_name + "\n")
    file1.write(" " + str(length_coords) + "\n")
    file1.write("Cartesian \n")

    for i in range(length_coords):
        file1.write(str(pick_one_aoi[i][0]) + "\t" +
                    str(pick_one_aoi[i][1]) + "\t" +
                    str(pick_one_aoi[i][2]) + "\n")
    file1.close()

    print("You have successfully created an ASE object. \n")
    print("This is a cubic cell of " + material_system + ". \n")
    print("Now you can read it in using ase.io.vasp.read_vasp. \n")


def ase_obj_adv(a_lattice: float, b_lattice: float, c_lattice: float,
                coords_dict: Dict[int, np.ndarray], frame_number: float,
                material_system: str, atom_names: List[str], atoms_num: str,
                filepath: str, filename_wr: str,
                ang2pix=10.5) -> None:
    """
    Create Atomic Simulation Environment (ASE) object.
    This object is a text file that can be readable by ase.io.vasp.read_vasp.
    This function reads in coordinates dictionary object generated by AtomAI.
    It uses a customized cell with multiple atoms as by user's choice.

    Args:
        a_lattice: list of lattice vector in a direction ([a1,a2,a3])
        b_lattice: list of lattice vector in a direction ([b1,b2,c3])
        c_lattice: list of lattice vector in a direction ([c1,c2,c3])
        coords_dict: dictionary object of coordinates produecd by AtomAI
        frame_number: image frame number
        material_system: name of material (string)
        atom_names: list of all atoms present in the system (string)
        atoms_num: list of number of each kind of atom present
        filepath: location to save the ASE object (string)
        filename_wr: name of ASE object (string)
    """
    pick_one_aoi = np.array(coords_dict[frame_number])  # convert to np array
    pick_one_aoi = pick_one_aoi / ang2pix  # pixel to angstrom conversion

    c_coords_aoi = (np.max(pick_one_aoi)) / 2

    pick_one_aoi[:, 2] = c_coords_aoi
    length_coords = pick_one_aoi.shape[0]

    # open a text file and write to it following the format of .vasp file
    file1 = open(str(filepath) + str(filename_wr), "w")
    file1.write(str(material_system) + "\n")
    file1.write(" 1.0000 \n")
    file1.write("  " + str(a_lattice[0]) + " " + str(a_lattice[1]) + " " +
                str(a_lattice[2]) + "\n")
    file1.write("  " + str(b_lattice[0]) + " " + str(b_lattice[1]) + " " +
                str(b_lattice[2]) + "\n")
    file1.write("  " + str(c_lattice[0]) + " " + str(c_lattice[1]) + " " +
                str(c_lattice[2]) + "\n")

    for j in range(len(atom_names)):
        file1.write(" " + atom_names[j] + " ")
        file1.write("\n")
    for k in range(len(atoms_num)):
        file1.write(" " + str(atoms_num[k]) + " ")
    file1.write("\n")
    file1.write("Cartesian \n")

    for i in range(length_coords):
        file1.write(str(pick_one_aoi[i][0]) + "\t" +
                    str(pick_one_aoi[i][1]) + "\t" +
                    str(pick_one_aoi[i][2]) + "\n")
    file1.close()
    print("You have successfully created an ASE object. \n")
    print("You have prepared " + material_system + ". \n")
    print("Now you can read it in using ase.io.vasp.read_vasp. \n")
